% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PROseq_pipeline.R
\name{vl_PROseq_processing}
\alias{vl_PROseq_processing}
\title{PRO-seq pipeline}
\usage{
vl_PROseq_processing(
  metadata,
  processed_metadata_output,
  fq_output_folder = "/scratch/stark/vloubiere/fq/PROseq/",
  bam_output_folder = "/scratch/stark/vloubiere/bam/PROseq/",
  count_output_folder = "db/counts/PROseq/",
  alignment_stats_output_folder = "db/alignment_stats/PROseq/",
  bw_output_folder = "db/bw/PROseq/",
  Rpath = "/software/f2022/software/r/4.3.0-foss-2022b/bin/Rscript",
  cores = 8,
  mem = 64,
  overwrite = FALSE,
  counts.exists = TRUE,
  submit = FALSE,
  wdir = getwd(),
  logs = "db/logs/PROseq/processing",
  time = "2-00:00:00"
)
}
\arguments{
\item{metadata}{The path to a correctly formatted .xlsx, .rds or .txt metadata file, or a data.table.
See the template at '/groups/stark/vloubiere/projects/vl_pipelines/Rdata/metadata_PROseq.xlsx'.}

\item{processed_metadata_output}{An .rds path where to save the processed metadata file, which contains the paths of all output files and will be used to manage them.
By default, when importing the metadata from an excel sheet, "_processed.rds" will be appended to the excel file path.}

\item{fq_output_folder}{Output folder for .fq files. Default= "/scratch/stark/vloubiere/fq/PROseq/".}

\item{bam_output_folder}{Output folder for aligned .bam files. Default= "/scratch/stark/vloubiere/bam/PROseq/".}

\item{count_output_folder}{Output folder for count files. Default= "db/counts/PROseq/".}

\item{alignment_stats_output_folder}{Output folder for alignment statistics. Default= "db/alignment_stats/PROseq/".}

\item{bw_output_folder}{Output folder for .bw tracks. Default= "db/bw/PROseq/".}

\item{Rpath}{Path to an Rscript executable. Default= "/software/f2022/software/r/4.3.0-foss-2022b/bin/Rscript".}

\item{cores}{Number of cores per job. Default= 8.}

\item{mem}{Memory per job (in Go). Default= 64.}

\item{overwrite}{Should existing files be overwritten?}

\item{counts.exists}{If the output umi file already exists and overwrite is set to FALSE, skips demultiplexing and alignment. Default= TRUE.}

\item{submit}{Should the command be submitted? Default= FALSE.}

\item{wdir}{The working directory to use. Default= getwd(), meaning current working directory will be used.}

\item{logs}{Output folder for log files. Default= "db/logs/CUTNRUN/processing".}

\item{time}{The time required for the SLURM scheduler. Default= '2-00:00:00'.}
}
\value{
Return a data.table containing, for each sampleID, the concatenated commands that are required to process the data.
These commands can then be submitted either directly via the function, or using vl_bsub()...
}
\description{
To use this this pipeline, please install the vl_function package using install_github("vloubiere/vlfunction")
in your interactive Rstudio session AND in the local installation of R 4.3.0 ('/software/f2022/software/r/4.3.0-foss-2022b/bin/R') 
which will be used to submit R sub-script.
}
\details{
The pipeline is split into two main functions. The first function vl_PROseq_processing() aligns the reads and filters confident alignments.
It takes as input a (correctly formatted) metadata file, saves the processed_metadata file and returns and/or submit the command lines to: \cr
1/ extract reads from VBC bam file. Output .fq files are saved in fq_output_folder/ \cr
2/ trim the reads. Output .fq files are saved in fq_output_folder/ \cr
3/ aligns them to mouse/human genome (see 'genome' column of the metadata table). Output .bam files are saved in bam_output_folder/ \cr
4/ store unaligned read into a .fq file. Output .fq files are saved in tmp_folder/fq/ \cr
5/ align these remaining reads to spike-in genome ('dm3'). Output .bam files are saved in tmp_folder/bam/ \cr
6/ compute counts and statistics both for the reference genome and for spike-in. Output .txt files are stored in alignment_stats_output_folder/  \cr
7/ output .bw tracks for positive and negative strand reads. Output .bw files are stored in bw_output_folder/  \cr

The second function, vl_PROseq_DESeq2() can be used for differential analysis. It returns: \cr
1/ The umi counts overlapping the features provided in the annotation.files argument. Output .txt files are stored in count_output_folder/ \cr
2/ a .dds DESeq2 object for each experiment. Output .dds (rds) files are stored in the dds_output_folder/ \cr
3/ the fold-change tables corresponding to the comparison of 'DESeq2_condition' versus 'DESeq2_control' conditions (see colnames of the processed_metadata file). Output .txt files are stored in the FC_output_folder/ \cr
4/ A barplot showing the statistics of each dds file, which will be saved in the PDF_output_folder. \cr
5/ MA plots corresponding to each comparison, which will be saved in the PDF_output_folder. \cr
}
\examples{
library(vlfunctions)

Example metadata ----
metadata <- system.file("PROseq_pipeline", "metadata_PROseq.xlsx", package = "vlfunctions")

# Generate command lines ----
cmd <- vl_PROseq_processing(metadata = metadata,
                            overwrite= TRUE,
                            submit= FALSE)
                          
# To actually submit the jobs, switch to submit= TRUE ----
vl_PROseq_processing(metadata = metadata,
                    processed_metadata_output = "Rdata/metadata_PROseq_processed.rds",
                    overwrite= FALSE, # Existing files will not be processed again
                    submit= TRUE)

# Differential analysis
See ?vl_PROseq_DESeq2()

}
