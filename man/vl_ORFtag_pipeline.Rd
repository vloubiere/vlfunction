% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ORFtag_pipeline.R
\name{vl_ORFtag_pipeline}
\alias{vl_ORFtag_pipeline}
\title{ORFtag pipeline}
\usage{
vl_ORFtag_pipeline(
  metadata,
  processed_metadata_output,
  fq_output_folder = "/scratch/stark/vloubiere/fq/ORFtag/",
  bam_output_folder = "/scratch/stark/vloubiere/bam/ORFtag/",
  alignment_stats_folder = "db/alignment_stats/ORFtag/",
  bam_unique_output_folder = "db/bam_unique/ORFtag/",
  bed_output_folder = "db/bed/ORFtag/",
  exon_assignment_output_folder = "db/exon_assignment/ORFtag/",
  tmp_folder = "/scratch/stark/vloubiere/ORFtag/tmp/sort/",
  Rpath = "/software/f2022/software/r/4.3.0-foss-2022b/bin/Rscript",
  cores = 8,
  mem = 32,
  overwrite = FALSE,
  submit = FALSE,
  wdir = getwd(),
  logs = "db/logs/ORFtag",
  time = "1-00:00:00"
)
}
\arguments{
\item{metadata}{The path to a correctly formatted .xlsx, .rds or .txt metadata file, or a data.table. See examples for a template.}

\item{processed_metadata_output}{A .rds path to save the processed metadata file, containing the output file paths. By default, "_processed.rds" will be appended to the excel file path.}

\item{fq_output_folder}{Output folder for demultiplexed fq files. Default= "/scratch/stark/vloubiere/fq/ORFtag/".}

\item{bam_output_folder}{Output folder for aligned bam files Default= "/scratch/stark/vloubiere/bam/ORFtag/".}

\item{alignment_stats_folder}{Output folder for alignment statistics. Default= "db/alignment_stats/ORFtag/".}

\item{bam_unique_output_folder}{Output folder for .bam files containing unique insertions. Default= "db/bam_unique/ORFtag/".}

\item{bed_output_folder}{Output folder for .bed files containing unique insertions. Default= "db/bed/ORFtag/".}

\item{exon_assignment_output_folder}{Output folder for counts_same_strand and counts_rev_strand files, containing exon assignment for each unique insertion. Default= "db/exon_assignment/ORFtag/".}

\item{tmp_folder}{Output folder for temporary bam files during sorting. Default= "/scratch/stark/vloubiere/ORFtag/tmp/sort/".}

\item{Rpath}{Path to an Rscript executable. Default= "/software/f2022/software/r/4.3.0-foss-2022b/bin/Rscript".}

\item{cores}{Number of cores per job. Default= 8.}

\item{mem}{Memory per job (in Go). Default= 32.}

\item{overwrite}{Should existing files be overwritten? Default= FALSE, meaning that only the commands for which output files do not exist will be returned and/or submitted.}

\item{submit}{Should the command be submitted? Default= FALSE.}

\item{wdir}{The working directory to use. Default= getwd(), meaning current working directory will be used.}

\item{logs}{Output folder for log files. Default= "db/logs".}

\item{time}{The time required for the SLURM scheduler. Default= '1-00:00:00'.}
}
\value{
Return a data.table containing, for each sampleID, the concatenated commands that are required to process the data.
These commands can then be submitted either directly via the function, or using vl_bsub()....
}
\description{
To use this this pipeline, please install the vl_function package using install_github("vloubiere/vlfunction")
or devtools::install("/groups/stark/vloubiere/vlfunction/") in your interactive Rstudio session AND
in the local installation of R 4.3.0 ('/software/f2022/software/r/4.3.0-foss-2022b/bin/R') 
which will be used to submit R sub-script.
}
\details{
Takes as input a (correctly formatted) metadata file, saves the processed metadata file and returns and.or submit the command lines to: \cr
 1/ extract reads from VBC bam file \cr
 2/ trim the reads \cr
 3/ Aligns to mouse/human genome (see 'genome' column of the metadata table) and returns a bam file \cr
 4/ Return alignment statistics \cr
 5/ Collapse unique reads and stores them into a bam file \cr
 6/ assign insertions to closest downstream genes \cr
 
 Then, the second function vl_ORFtrap_call_hits() can be used to call confident hits.
}
\examples{
library(vlfunctions)

# Example metadata ----
metadata <- system.file("ORFtag_pipeline", "metadata_ORFtag.xlsx", package = "vlfunctions")

# Generate command lines ----
cmd <- vl_ORFtag_pipeline(metadata= metadata,
                          overwrite= TRUE,
                          submit= FALSE)
                          
# To actually submit the jobs, switch to submit= TRUE ----
vl_ORFtag_pipeline(metadata= metadata,
                   processed_metadata_output = "Rdata/metadata_ORFtag_processed.rds",
                   overwrite= FALSE, # Ensures that existing files are not processed again 
                   submit= TRUE)
                   
# Processed metadata
processed <- readRDS("Rdata/metadata_ORFtag_processed.rds")

# To call hits
see ?vl_ORFtrap_call_hits()

# To create .gtf files containing non-first exon start coordinates ------------------
# Mouse (mm10):
# gtf <- rtracklayer::import("ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M25/gencode.vM25.basic.annotation.gtf.gz")
gtf <- rtracklayer::import("db/gtf/gencode.vM25.basic.annotation.gtf.gz")
exons <- gtf[gtf$transcript_type=="protein_coding" & gtf$type=="exon" & gtf$exon_number>1]
exons <- GenomicRanges::resize(exons, 1, "start")
mcols(exons) <- mcols(exons[, c("gene_id", "gene_name", "mgi_id", "exon_number", "exon_id")])
exons$gene_id <- gsub("[.*]..*", "\\\\1", exons$gene_id)
exons$exon_id <- gsub("[.*]..*", "\\\\1", exons$exon_id)
exons <- unique(exons)
rtracklayer::export(exons,
                    "db/gtf/exons_start_mm10.gtf")
                    
# Human (hg38):
# gtf <- rtracklayer::import("https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_43/gencode.v43.annotation.gtf.gz")

}
